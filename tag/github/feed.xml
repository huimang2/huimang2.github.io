<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://huimang2.github.io/tag/github/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://huimang2.github.io/" rel="alternate" type="text/html" />
  <updated>2023-06-11T22:25:50+09:00</updated>
  <id>https://huimang2.github.io/tag/github/feed.xml</id>

  
  
  

  
    <title type="html">Rubisco’s Programming Note | </title>
  

  
    <subtitle>프로그래밍 노트</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Git 튜토리얼</title>
      <link href="https://huimang2.github.io/etc/git-tutorial" rel="alternate" type="text/html" title="Git 튜토리얼" />
      <published>2022-09-06T07:00:00+09:00</published>
      <updated>2022-09-06T07:00:00+09:00</updated>
      <id>https://huimang2.github.io/etc/git-tutorial</id>
      <content type="html" xml:base="https://huimang2.github.io/etc/git-tutorial">&lt;h1 id=&quot;git-설치&quot;&gt;git 설치&lt;/h1&gt;

&lt;p&gt;기본적인 용어를 알아보았으니 실제로 명령어를 통해 커밋과 풀, 푸시를 해보도록 하겠습니다. IDE를 통해 쉽게 작업할 수 있지만 터미널상에서 명령어를 통해 커밋을 하겠습니다.&lt;/p&gt;

&lt;p&gt;우선은 원격 컴퓨터에 로그인하고 git를 설치합니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;커밋에 정보를 남기기 위해 config에 name과 mail을 입력합니다. email은 github에 입력된 email을 입력해야 잔디가 심어집니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;userName]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;userEmail]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;커밋commit&quot;&gt;커밋(commit)&lt;/h1&gt;

&lt;p&gt;우선 로컬 저장소를 생성해보도록 하겠습니다. 우선 작업 트리를 생성하고 이동합니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/git/example &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git/example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로컬 저장소는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 명령어를 통해 생성할 수 있습니다.&lt;/p&gt;

&lt;h6 id=&quot;init-명령어&quot;&gt;init 명령어&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로컬 저장소가 생성되면 .git 폴더가 생성됩니다. 이제 임의의 파일을 하나 생성하고 임의의 내용을 작성합니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;test.txt &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;임의의 내용 작성 1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-02.png&quot; alt=&quot;img02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;커밋을 하기 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; 명령어를 통해 인덱스에 파일을 등록해야 합니다.&lt;/p&gt;

&lt;h6 id=&quot;add-명령어&quot;&gt;add 명령어&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인덱스에 등록된 파일을 확인하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;

&lt;h6 id=&quot;status-명령어&quot;&gt;status 명령어&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-03.png&quot; alt=&quot;img03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 명령어를 통해 변경 상태를 기록합니다. 이때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m&lt;/code&gt; 옵션을 통해 커밋 메시지를 작성해야만 합니다.&lt;/p&gt;

&lt;h6 id=&quot;-m-옵션&quot;&gt;-m 옵션&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test.txt 파일 생성&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;커밋 로그를 확인하고 싶다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; 명령어를 입력해보세요.&lt;/p&gt;

&lt;h6 id=&quot;log-명령어&quot;&gt;log 명령어&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-04.png&quot; alt=&quot;img04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스테이징과 커밋을 한번에 해결하려면 commit 명령어에 -am 옵션을 주면 됩니다.&lt;/p&gt;

&lt;h6 id=&quot;-am-옵션&quot;&gt;-am 옵션&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test.txt 파일 생성&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;푸시push와-풀pull&quot;&gt;푸시(push)와 풀(pull)&lt;/h1&gt;

&lt;p&gt;이번에는 방금 생성한 로컬 저장소를 원격 저장소에 push 해보겠습니다. 그전에 ssh 인증키를 만들어서 github에 등록합시다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ed25519 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;이메일 주소&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;passphrase를 입력하라고 뜨면 암호를 입력해주거나 그냥 엔터를 눌러주시면 됩니다.&lt;/p&gt;

&lt;p&gt;인증키가 생생되면 다음 명령어로 개인키를 확인합니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.ssh/id_ed25519.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;터미널에 뜬 개인키를 복사하고 github에서 &lt;a href=&quot;https://github.com/settings/ssh/new&quot; target=&quot;_blank&quot;&gt;Settings &amp;gt; SSH and GPG keys &amp;gt; New SSH Key&lt;/a&gt;로 이동하여 개인키를 등록해줍니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;a href=&quot;https://github.com/new&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;에 접속하여 원격 저장소를 하나 생성합니다.&lt;/p&gt;

&lt;p&gt;저장소 주소를 복사한 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remote add&lt;/code&gt;명령어를 통해 원격 저장소를 추가해줄 수 있습니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add origin git@github.com:[userName]/[repository].git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원격 저장소가 추가되었는지 확인하기 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remote&lt;/code&gt; 명령어에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; 옵션을 주면 됩니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; 명령어를 통해 로컬 저장소의 변경 내역을 원격 저장소에 반영하도록 하겠습니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;github의 원격 저장소에 접속하면 test.txt 파일이 저장된 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이번에는 원격 저장소를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt;을 통해 복사하여 example2 작업 트리에 로컬 저장소를 만들어보겠습니다.&lt;/p&gt;

&lt;p&gt;우선 example2 작업 트리를 만들고 해당 폴더로 이동합니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/git/example2 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git/example2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; 명령어를 통해 원격 저장소를 복사합니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:[userName]/[repository].git &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;test.txt 파일을 수정해봅시다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;내용 추가&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-05.png&quot; alt=&quot;img05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;test.txt 파일을 스테이징 하여 커밋하고 원격 저장소에 푸시해줍시다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;내용 추가&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;example 작업트리로 이동하여 test.txt 파일의 내용을 확인합시다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git/example &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;no-toc&quot;&gt;아직 원격 저장소와 동기화되지 않았습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull&lt;/code&gt; 명령어로 원격 저장소의 커밋 내역을 로컬 저장소에 합치고 test.txt 내용을 확인하면 동기화가 된 것을 알 수 있습니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull origin main &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;브랜치branch&quot;&gt;브랜치(branch)&lt;/h1&gt;

&lt;p&gt;이제 브랜치를 만들어 보겠습니다. 브랜치는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;branch&lt;/code&gt; 명령어를 통해서 추가할 수 있습니다.&lt;/p&gt;

&lt;h6 id=&quot;브랜치-추가&quot;&gt;브랜치 추가&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;브랜치가 성생되었는지 확인하려면 다음 명령어를 입력하세요.&lt;/p&gt;

&lt;h6 id=&quot;브랜치-생성-확인&quot;&gt;브랜치 생성 확인&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-21.png&quot; alt=&quot;img21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브랜치를 이동하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; 명령어를 사용합니다. git 2.23 부터는 checkout의 기능이 분리되어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; 명령어를 통해서도 브랜치의 이동이 가능합니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;브랜치를 생성하고 바로 이동하려면 다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt; 옵션 / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt; 옵션을 붙이면 됩니다.&lt;/p&gt;

&lt;h6 id=&quot;checkout의-경우&quot;&gt;checkout의 경우&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;switch의-경우&quot;&gt;switch의 경우&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;브랜치의 삭제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; 옵션을 사용합니다.&lt;/p&gt;

&lt;h6 id=&quot;브랜치-삭제&quot;&gt;브랜치 삭제&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;병합merge&quot;&gt;병합(merge)&lt;/h1&gt;

&lt;p&gt;이번에는 병합을 해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext bgcolor blue highlighter-rouge&quot; style=&quot;color: royalblue&quot;&gt;issue1&lt;/code&gt; 브랜치로 이동하여 test.txt 파일을 임의로 수정하고 스테이징 후 커밋을 합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-22.png&quot; alt=&quot;img22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VSCode의 extension인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git Graph&lt;/code&gt;를 통하여 커밋 로그를 그래프로 확인하면 브랜치가 하나로 이어져있는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-23.png&quot; alt=&quot;img23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이것은 현재 issue1 브랜치를 기준으로 main 브랜치는 fast-forward 상태에 있기 때문입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-24.png&quot; alt=&quot;img24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 브랜치로 이동하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; 명령어로 하면 main 브랜치는 fast-forward merge가 됩니다.&lt;/p&gt;

&lt;h6 id=&quot;fast-forward-merge&quot;&gt;fast-forward merge&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-25.png&quot; alt=&quot;img25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번에는 non fast-forward merge를 해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext bgcolor blue highlighter-rouge&quot; style=&quot;color: royalblue&quot;&gt;issue1&lt;/code&gt; 브랜치로 이동하여 test.txt 파일을 수정한 후 커밋합니다.&lt;/p&gt;

&lt;h6 id=&quot;issue1-커밋&quot;&gt;issue1 커밋&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch issue1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;issue1 내용 추가&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; test.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test.txt issue1 내용 추가&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메인 브랜치로 이동 후 issue2 브랜치를 생성하여 이동 후, test.txt 파일을 수정한 후 커밋합니다.&lt;/p&gt;

&lt;h6 id=&quot;issue2-커밋&quot;&gt;issue2 커밋&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; issue2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;issue2 내용 추가&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; test.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test.txt issue2 내용 추가&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메인 브랜치로 이동하면 다음과 같이 fast-forward 상태가 됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-26.png&quot; alt=&quot;img26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext bgcolor blue highlighter-rouge&quot; style=&quot;color: royalblue&quot;&gt;issue1&lt;/code&gt; 브랜치를 fast-forward merge 합니다.&lt;/p&gt;

&lt;p&gt;메인 브랜치가 fast-forward 상태이기때문에 그냥 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; 명령어만 사용하도 fast-forward merge가 되지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ff&lt;/code&gt; 옵션을 주어 명시적으로 fast-forward merge를 하겠습니다.&lt;/p&gt;

&lt;h6 id=&quot;ff-옵션을-통한-fast-forward-merge&quot;&gt;–ff 옵션을 통한 fast-forward merge&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;--ff&lt;/span&gt; issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-27.png&quot; alt=&quot;img27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;메인 브랜치의 참조 커밋이 변경되면서 non fast-forward 상태가 되었습니다. 이 상태에서는 자동으로 non fast-forward merge가 됩니다.&lt;/p&gt;

&lt;p&gt;하지만 issue1과 issue2 양쪽에서 같은 파일을 수정했기 때문에 병합충돌이 발생합니다.&lt;/p&gt;

&lt;h6 id=&quot;non-fast-forward-merge&quot;&gt;non fast-forward merge&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge issue2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-28.png&quot; alt=&quot;img28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;test.txt 파일을 열어봅니다. 메인 브랜치인 HEAD의 변경 부분과 issue2 브랜치 변경부분을 다음과 같이 구분하여 파일이 수정되어 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-29.png&quot; alt=&quot;img29&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;head메인-브랜치의-변경부분&quot;&gt;HEAD(메인 브랜치)의 변경부분&lt;/h6&gt;
&lt;div data-lang=&quot;TXT&quot; class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
브랜치 병합 테스트
issue1 내용 추가
=======
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;issue2-브랜치의-변경부분&quot;&gt;issue2 브랜치의 변경부분&lt;/h6&gt;
&lt;div data-lang=&quot;TXT&quot; class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=======
issue2 내용 추가
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; issue2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 수정하고 스테이징 후 다시 커밋을 보내면 커밋이 생성되면서 merge가 됩니다.&lt;/p&gt;

&lt;h6 id=&quot;testtxt&quot;&gt;test.txt&lt;/h6&gt;
&lt;div data-lang=&quot;TXT&quot; class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;임의의 내용 작성 1
내용 추가
브랜치 병합 테스트
issue1 내용 추가
issue2 내용 추가
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;병합충돌-해결&quot;&gt;병합충돌 해결&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;병합충돌 해결&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-30.png&quot; alt=&quot;img30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-ff&lt;/code&gt; 옵션을 사용하면 fast-forward 상태일지라도 non fast-forward merge를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;issue1 브랜치로 변경하여 메인 브랜치와 fast-forward merge를 하고, test.txt를 수정한 후 스테이징 및 커밋합니다.&lt;/p&gt;

&lt;h6 id=&quot;issue1-새로운-커밋&quot;&gt;issue1 새로운 커밋&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch issue1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;issue1 새로운 커밋&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; test.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;issue1 새로운 커밋&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메인 브랜치로 이동하여 –no-ff 옵션을 통해 issue1을 non fast-forward merge 해봅시다.&lt;/p&gt;

&lt;h6 id=&quot;no-ff-옵션&quot;&gt;–no-ff 옵션&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt; issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 커밋 메시지를 적기위한 에디터가 뜹니다. vim과 같은 명령어를 사용합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-31.png&quot; alt=&quot;img31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;를 입력하면 병합이 완료됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-32.png&quot; alt=&quot;img32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또다른 병합 옵션으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--squash&lt;/code&gt;가 있는데 이는 rebase를 알아야합니다.&lt;/p&gt;

&lt;h1 id=&quot;리베이스rebase&quot;&gt;리베이스(rebase)&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;리베이스(rebase)&lt;/code&gt;는 이름 그대로 커밋이 분기되는 base를 수정하는 작업입니다. 공통된 커밋으로부터 수정하려는 base 커밋까지의 차이점을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;패치(patch)&lt;/code&gt;라는 공간에 임시로 저장하고 참조 커밋을 수정한 후 패치(patch)를 순차적으로 적용합니다.&lt;/p&gt;

&lt;p&gt;방금 병합한 작업을 다음 상태로 되돌려 베이스가 수정되는 과정을 보겠습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-27.png&quot; alt=&quot;img27&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;커밋-되돌리기&quot;&gt;커밋 되돌리기&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; HEAD~2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch issue1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; HEAD~2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선 issue2 브랜치로 이동하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase&lt;/code&gt; 명령어로 메인 브랜치를 base로 만듭니다.&lt;/p&gt;

&lt;h6 id=&quot;리베이스&quot;&gt;리베이스&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch issue2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아까 상황과 마찬가지로 issue1과 issue2에서 동시에 같은 파일을 수정했기 때문에 패치를 만드는 과정에서 병합충돌이 발생했습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-33.png&quot; alt=&quot;img33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아까와 동일하게 test.txt 파일을 수정합니다.&lt;/p&gt;

&lt;h6 id=&quot;testtxt-1&quot;&gt;test.txt&lt;/h6&gt;
&lt;div data-lang=&quot;TXT&quot; class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;임의의 내용 작성 1
내용 추가
브랜치 병합 테스트
issue1 내용 추가
issue2 내용 추가
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스테이징 한 후 병합과는 달리 커밋을 하지 않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase&lt;/code&gt; 명령어에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt; 옵션을 주어 리베이스를 계속 진행하도록 합니다.&lt;/p&gt;

&lt;h6 id=&quot;리베이스-진행&quot;&gt;리베이스 진행&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add test.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 커밋 메시지를 입력하는 에디터가 뜹니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;를 입력하여 커밋을 생성합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-34.png&quot; alt=&quot;img34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 메인 브랜치로 이동하여 fast-forward merge를 합니다. 병합과 비교해보면 issue2 브랜치에 있던 커밋이 main 브랜치로 베이스가 옮겨졌음을 확인할 수 있습니다.&lt;/p&gt;

&lt;h6 id=&quot;리베이스의-경우&quot;&gt;리베이스의 경우&lt;/h6&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-35.png&quot; alt=&quot;img35&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;병합의-경우&quot;&gt;병합의 경우&lt;/h6&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-30.png&quot; alt=&quot;img30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;중간에 리베이스를 취소하려면 –continue 옵션 대신에 –abort 옵션을 넣습니다.&lt;/p&gt;

&lt;h6 id=&quot;리베이스-취소&quot;&gt;리베이스 취소&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;리베이스를 사용하면 커밋 히스토리가 한줄로 깔끔해지지만 이미 공개된 저장소에 push한 커밋을 리베이스하면 히스토리가 꼬일 수 있으므로 주의해야합니다.&lt;/p&gt;

&lt;h1 id=&quot;체리픽cherry-pick&quot;&gt;체리픽(cherry-pick)&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;체리픽(cherry-pick)&lt;/code&gt;은 리베이스와 유사하게 베이스를 변경하는 작업인데, 원하는 커밋만 pick해서 브랜치에 적용시키는 작업입니다.&lt;/p&gt;

&lt;p&gt;issue1 브랜치로 이동하여 커밋을 2번 합니다.&lt;/p&gt;

&lt;h6 id=&quot;issue1-브랜치에서-2번의-커밋-작업&quot;&gt;issue1 브랜치에서 2번의 커밋 작업&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch issue1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;issue1 체리픽1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; test.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;issue1 체리픽1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;issue1 체리픽2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; test.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;issue1 체리픽2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로그를 통해 체리픽1 커밋의 해시를 확인합니다.&lt;/p&gt;

&lt;h6 id=&quot;커밋-해시-확인&quot;&gt;커밋 해시 확인&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-37.png&quot; alt=&quot;img37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;메인 브랜치로 이동하여 cherry-pick 명령어를 통해 체리픽 작업을 합니다.&lt;/p&gt;

&lt;h6 id=&quot;cherry-pick&quot;&gt;cherry-pick&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cherry-pick &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;커밋 해시]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마찬가지로 패치(patch) 과정에서 충돌이 발생합니다.&lt;/p&gt;

&lt;h6 id=&quot;패치patch-충돌&quot;&gt;패치(patch) 충돌&lt;/h6&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-36.png&quot; alt=&quot;img36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;test.txt 파일을 충돌나지 않도록 수정합니다.&lt;/p&gt;

&lt;h6 id=&quot;testtxt-2&quot;&gt;test.txt&lt;/h6&gt;
&lt;div data-lang=&quot;TXT&quot; class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;임의의 내용 작성 1
내용 추가
브랜치 병합 테스트
issue1 내용 추가
issue2 내용 추가
issue1 체리픽1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;저장하고 스테이징 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt; 옵션으로 체리픽을 계속 진행해주세요.&lt;/p&gt;

&lt;h6 id=&quot;체리픽-진행&quot;&gt;체리픽 진행&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cherry-pick &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 원하는 커밋만 브랜치에 가져왔습니다. 커밋을 새로 생성했기 때문에 커밋 해시가 다르다는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;h6 id=&quot;체리픽-결과&quot;&gt;체리픽 결과&lt;/h6&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-38.png&quot; alt=&quot;img38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;중간에 체리픽을 취소하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt; 옵션 대신에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; 옵션을 넣으면 됩니다.&lt;/p&gt;

&lt;h6 id=&quot;체리픽-취소&quot;&gt;체리픽 취소&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cherry-pick &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;스쿼시-병합squash-merge&quot;&gt;스쿼시 병합(squash merge)&lt;/h1&gt;

&lt;p&gt;체리픽과 유사한 작업이 병합의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--squash&lt;/code&gt; 옵션입니다. 스쿼시 옵션은 리베이스처럼 브랜치 베이스의 참조를 변경하지만, 리베이스가 베이스 이후로 브랜치 전체 커밋을 반영하는 것과 달리 스쿼시 병합은 브랜치의 커밋을 하나로 합쳐 체리픽처럼 새로운 하나의 커밋을 생성합니다.&lt;/p&gt;

&lt;h6 id=&quot;체리픽-작업-이전으로-되돌리기&quot;&gt;체리픽 작업 이전으로 되돌리기&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; HEAD~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;스쿼시-병합&quot;&gt;스쿼시 병합&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;--squash&lt;/span&gt; issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;testtxt-패치patch-충돌-해결&quot;&gt;test.txt 패치(patch) 충돌 해결&lt;/h6&gt;
&lt;div data-lang=&quot;TXT&quot; class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;임의의 내용 작성 1
내용 추가
브랜치 병합 테스트
issue1 내용 추가
issue2 내용 추가
issue1 체리픽1
issue1 체리픽2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;스쿼시-병합-진행&quot;&gt;스쿼시 병합 진행&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;스쿼시 병합&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;reset과-revert&quot;&gt;reset과 revert&lt;/h1&gt;

&lt;p&gt;커밋 상태를 과거로 되돌리는 명령어에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;revert&lt;/code&gt;가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset&lt;/code&gt;은 헤드 자체를 과거로 옮겨 특정 커밋으로 되돌리는 작업을 하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;revert&lt;/code&gt;는 과거로 되돌린다는 이력을 남기고서 특정 커밋을 없던 것으로 하는 작업을 합니다.&lt;/p&gt;

&lt;h2 id=&quot;reset&quot;&gt;reset&lt;/h2&gt;

&lt;p&gt;reset의 옵션에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--soft&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mixed&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--hard&lt;/code&gt;가 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;--soft&lt;/strong&gt; : 커밋을 하기 전단계인 스테이징 상태로 돌려놓습니다.&lt;br /&gt;
&lt;strong&gt;--mixed&lt;/strong&gt; : 기본값으로 적용되며, 파일을 스테이징 이전단계로 돌려놓습니다.(파일이 작업 트리에 존재)&lt;br /&gt;
&lt;strong&gt;--hard&lt;/strong&gt; : 추적 상태인 파일을 작업 트리에서 제거합니다. 즉, 파일을 수정하기 전으로 돌려놓습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;명령어의 형태는 다음과 같습니다.&lt;/p&gt;

&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;옵션&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;선택&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;커밋 해시]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;커밋 해시 대신에 헤드의 상대적인 수치로도 reset을 수행할 수 있습니다. 틸트(~숫자)의 경우 틸트로부터 숫자만큼 reset을 수행하며, 캐럿(^)의 경우 헤드로부터 한단계 아래 커밋으로 reset을 수행합니다.&lt;/p&gt;

&lt;p&gt;예를 들어 아래 코드의 경우 2칸 이전의 커밋을 파일 수정 이전으로 되돌립니다.&lt;/p&gt;

&lt;h6 id=&quot;reset-1&quot;&gt;reset&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; HEAD~2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;revert&quot;&gt;revert&lt;/h2&gt;

&lt;p&gt;revert는 하나의 커밋 상태로 되돌리며, 상태를 되돌릴때마다 revert 상태를 남기는 커밋을 생성합니다. 다음과 같이 여러 커밋에 대하여 revert 작업이 가능합니다.&lt;/p&gt;

&lt;h6 id=&quot;revert-1&quot;&gt;revert&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git revert HEAD^ HEAD^^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;스태쉬stash&quot;&gt;스태쉬(stash)&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;스태쉬(stash)&lt;/code&gt;는 추적 상태에 있거나 스테이징 상태에 있는 파일을 임시로 저장하는 작업입니다. 추적 상태에 있거나 스테이징 상태인 파일이 있다면 다른 브랜치로 이동하지 못합니다. 이때 스태쉬를 통해 파일을 저장하고 다른 브랜치로 이동할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음 명령어를 통해 새로운 스태쉬를 생성할 수 있습니다.&lt;/p&gt;

&lt;h6 id=&quot;스태쉬-생성&quot;&gt;스태쉬 생성&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash

또는

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스태쉬 스택의 확인은 다음 명령어를 통해 확인할 수 있습니다. 리스트에서 스태쉬 이름을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;ex) stash@{0}: ….&lt;/p&gt;

&lt;h6 id=&quot;스태쉬-목록&quot;&gt;스태쉬 목록&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스태쉬의 적용은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt; 명령어를 통해 적용할 수 있습니다. 스태쉬를 생성한 브랜치 뿐만 아니라 다른 브랜치에도 적용가능합니다.&lt;/p&gt;

&lt;h6 id=&quot;스태쉬-목록-1&quot;&gt;스태쉬 목록&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch issue2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash apply stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;옵션 없이 적용하면 스테이징 상태에 있던 파일도 추적 상태로 적용되지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--index&lt;/code&gt; 옵션을 준다면 스테이징 상태에 있던 파일은 스테이징 상태 그대로 적용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop&lt;/code&gt; 명령을 사용하면 스태쉬를 스택에서 삭제하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt; 명령을 사용하면 스태쉬를 적용하고 스택에서 삭제합니다.&lt;/p&gt;

&lt;h6 id=&quot;스태쉬-삭제&quot;&gt;스태쉬 삭제&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash drop stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;-m –keep-index&lt;/p&gt;

&lt;h1 id=&quot;원격-브랜치의-생성과-삭제&quot;&gt;원격 브랜치의 생성과 삭제&lt;/h1&gt;

&lt;p&gt;원격 브랜치를 생성하려면 로컬 브랜치가 존재해야하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; 명령어를 사용하여 생성할 수 있습니다.&lt;/p&gt;

&lt;h6 id=&quot;originissue1-원격-브랜치-생성&quot;&gt;origin/issue1 원격 브랜치 생성&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원격 브랜치를 가져오려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; 명령어에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--track&lt;/code&gt; 옵션을 붙입니다.&lt;/p&gt;

&lt;h6 id=&quot;originissue1-원격-브랜치-가져오기&quot;&gt;origin/issue1 원격 브랜치 가져오기&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git switch origin/issue1

또는 

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout origin/issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원격 브랜치를 삭제하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; 명령어에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--delete&lt;/code&gt; 옵션을 붙입니다.&lt;/p&gt;

&lt;h6 id=&quot;originissue1-원격-브랜치-삭제&quot;&gt;origin/issue1 원격 브랜치 삭제&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; origin issue1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;원격-저장소-동기화&quot;&gt;원격 저장소 동기화&lt;/h1&gt;

&lt;p&gt;원격 저장소를 동기화 하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;

&lt;h6 id=&quot;origin-원격-저장소-동기화&quot;&gt;origin 원격 저장소 동기화&lt;/h6&gt;
&lt;div data-lang=&quot;BASH&quot; class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git fetch origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;pull 명령어의 경우, fetch 작업과 merge 작업을 수행합니다. fetch를 하면 원격 저장소로부터 최신이력을 가져와 이름없는 브랜치에 반영합니다. 이 브랜치는 FETCH_HEAD라는 이름으로 참조할 수 있습니다. 메인 브랜치를 병합하고 싶다면 브랜치를 merge하거나 pull을 수행하면 됩니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>huimang2</name>
        
        
      </author>

      

      
        <category term="github" />
      

      
        <summary type="html">git 설치</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Git 길라잡이</title>
      <link href="https://huimang2.github.io/etc/git" rel="alternate" type="text/html" title="Git 길라잡이" />
      <published>2022-09-04T07:00:00+09:00</published>
      <updated>2022-09-04T07:00:00+09:00</updated>
      <id>https://huimang2.github.io/etc/git</id>
      <content type="html" xml:base="https://huimang2.github.io/etc/git">&lt;h1 id=&quot;git와-github-차이&quot;&gt;Git와 Github 차이&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git&lt;/code&gt;는 컴퓨터 파일의 변경사항을 추적하고 여러 명의 사용자들 간에 해당 파일들의 작업을 조율하기 위한 분산 버전 관리 시스템입니다. 원래는 Linux 소스코드를 관리할 목적으로 개발 되었습니다.&lt;/p&gt;

&lt;p&gt;Git를 통해 버전을 관리하면 소스 코드가 변경된 이력을 쉽게 확인할 수 있으며, 특정 시점의 버전과 비교하거나 그 시점의 버전으로 파일을 되돌릴 수 있습니다. 또한 협업을 하는 경우 충돌을 감지하여 사용자에게 경고를 주기도 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitHub&lt;/code&gt;는 Git Repository를 위한 &lt;code class=&quot;language-plaintext bgcolor orange highlighter-rouge&quot; style=&quot;color: orangered&quot;&gt;웹 기반 호스팅 서비스&lt;/code&gt; 입니다. 클라우드 서버를 통해 로컬에서 관리하는 소스코드를 업로드하고 공유할 수 있어서 공동작업이 가능하도록 합니다. Git의 기본적인 기능을 제공하여 한 프로젝트에 여러 사람이 공동으로 작업하여도 효율적으로 버전관리를 할 수 있도록 합니다.&lt;/p&gt;

&lt;h1 id=&quot;git-용어&quot;&gt;Git 용어&lt;/h1&gt;

&lt;h2 id=&quot;저장소repository&quot;&gt;저장소(Repository)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;저장소(Repository)&lt;/code&gt;는 말그대로 파일이나 폴더를 저장해 두는 장소를 말합니다. &lt;code class=&quot;language-plaintext bgcolor orange highlighter-rouge&quot; style=&quot;color:orangered&quot;&gt;파일의 변경 이력을 관리&lt;/code&gt;하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;원격 저장소(Remote Repository)&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;로컬 저장소(Local Repository)&lt;/code&gt;로 구분됩니다.&lt;/p&gt;

&lt;p&gt;원격 저장소는 Github와 같이 소스코드를 공유하고 공동작업을 하기위한 저장소이고, 로컬 저장소는 개인 전용 저장소입니다.&lt;/p&gt;

&lt;p&gt;평소에는 로컬 저장소에서 작업을 하지만 공동작업이 필요하다면 원격 저장소에 저장하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; 명령어를 통해 로컬 저장소로 코드를 가져올 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;작업-트리work-tree--인덱스index&quot;&gt;작업 트리(Work Tree) / 인덱스(Index)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;작업 트리(work tree)&lt;/code&gt;는 소스코드를 편집하는 작업 공간(workspace) 그 자체를 말하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인덱스(index)&lt;/code&gt;는 커밋을 하기 전에 작업 트리와 저장소 사이에 존재하는 공간을 말합니다.&lt;/p&gt;

&lt;p&gt;커밋 작업은 작업 트리의 변경 이력을 바로 기록하지 않고 인덱스에 저장되어 있는 파일의 상태를 우선적으로 기록하게 됩니다.&lt;/p&gt;

&lt;p&gt;인덱스에 파일 상태를 기록하는 것을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;스테이징(staging)&lt;/code&gt;이라고 하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; 명령어를 통해 스테이징 상태로 만들 수 있습니다. 커밋은 인덱스에 스테이징 상태로 있는 파일의 이력만 저장소에 저장하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;풀pull--푸시push&quot;&gt;풀(pull) / 푸시(push)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;풀(pull)&lt;/code&gt;은 원격 저장소에 저장된 파일을 로컬 저장소로 가져오는 것을 말하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;푸시(push)&lt;/code&gt;는 로컬 저장소에 저장된 파일을 원격 저장소에 반영하는 것을 말합니다. 각각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; 명령어를 통해 작업할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;커밋commit&quot;&gt;커밋(Commit)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt;은 &lt;code class=&quot;language-plaintext bgcolor orange highlighter-rouge&quot; style=&quot;color:orangered&quot;&gt;파일의 변경 이력을 기록&lt;/code&gt;하는 명령어 입니다. 작업 트리(work tree)의 파일을 저장소(repository)에 스냅샷으로 기록하며, 시간순으로 저장되어 과거 변경 이력과 그 내용을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;커밋들은 서로 체인구조를 형성하여 참조하고 있기 때문에 과거 커밋 내용이 훼손되면 그 이후의 커밋도 훼손되어 버립니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-01.png&quot; alt=&quot;img01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그래프에서 각 노드는 커밋 시점을 나타냅니다. 보는 바와 같이 커밋 시점은 순차적으로 연결되어 있습니다.&lt;/p&gt;

&lt;p&gt;각 커밋은 영문과 숫자로 구성된 40자리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;커밋 해시(commit hash)&lt;/code&gt;를 통해 구분되며, 커밋을 하기 위해서는 커밋 메시지의 작성이 필요합니다. 커밋 메시지를 작성하지 않으면 커밋이 이루어지지 않습니다.&lt;/p&gt;

&lt;p&gt;커밋은 코드에 이력을 남기는 중요한 작업이므로 커밋 메시지에는 코드의 변경 내용과 변경 사유 등을 간략히 기록해 두는것이 권장됩니다.&lt;/p&gt;

&lt;h2 id=&quot;브랜치branch&quot;&gt;브랜치(Branch)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;브랜치(Branch)&lt;/code&gt;는 독립적인 작업을 진행할 수 있도록 해주는 기능입니다. 각각의 브랜치는 다른 브랜치의 영향을 받지않아서 여러 작업을 동시에 진행할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-06.png&quot; alt=&quot;img06&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로컬 저장소를 생성하면 기본적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메인(main)&lt;/code&gt; 브랜치에서 작업을 수행하게 되고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;체크아웃(checkout)&lt;/code&gt; 하기 전까지 모든 작업은 메인 브랜치에서 이루어집니다. 여기에서 체크아웃이란 브랜치를 옮기는 작업을 말합니다.&lt;/p&gt;

&lt;p&gt;공동작업을 할때에는 우선 로컬 저장소의 메인 브랜치를 pull을 통해 원격 저장소의 메인 브랜치와 동기화 시킨 후, 작업전용 브랜치를 만들어 독립적인 작업을 하게 됩니다. 이때 브랜치가 생성되는데, 브랜치는 항상 최신 커밋을 참조하고 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-11.png&quot; alt=&quot;img11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브랜치는 작업에 따라 자유롭게 만들 수 있지만, 이를 효율적으로 관리하기 위해서는 사전에 팀원들과 어떤 방식으로 브랜치를 만들고 통합할 것인지 미리 정해두는 것이 좋습니다. 즉, 브랜치 전략이 있어야 합니다.&lt;/p&gt;

&lt;p&gt;가정 널리 사용되는 브랜치 전략으로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git-Flow&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github-Flow&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gitlab-Flow&lt;/code&gt;가 있습니다.&lt;/p&gt;

&lt;h3 class=&quot;no-toc&quot;&gt;Git-Flow&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git flow&lt;/code&gt;는 &lt;code class=&quot;language-plaintext bgcolor orange highlighter-rouge&quot; style=&quot;color: orangered&quot;&gt;메인(main)&lt;/code&gt; 브랜치(기존 master 브랜치)와 &lt;code class=&quot;language-plaintext bgcolor orange highlighter-rouge&quot; style=&quot;color: orangered&quot;&gt;개발(devlop)&lt;/code&gt; 브랜치를 중점으로 운영하는 브랜치 전략입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-07.png&quot; alt=&quot;img07&quot; title=&quot;Vincent Driessen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 전략에는 다음과 같이 5개의 브랜치가 존재합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;main&lt;/strong&gt; : 정식 배포되는 브랜치 입니다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt; : 개발 브랜치로, 이 브랜치를 기준으로 하여 각자 작업한 기능등을 병합합니다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt; : 단위 기능을 개발하는 브랜치 입니다. 개발이 완료되면 develop 브랜치에 병합됩니다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;release&lt;/strong&gt; : main 브랜치에 보내기 전에 품질검사를 하기 위한 브랜치 입니다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;hotpix&lt;/strong&gt; : main 브랜치에 배포한 이후 버그가 생겼을 때 긴급 패치를 위한 브랜치 입니다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 전략의 운영과정은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;main 브랜치에서 develop 브랜치를 분기하고, 개발자들은 develop 브랜치에 커밋을 합니다.&lt;/li&gt;
  &lt;li&gt;기능 구현이 있는 경우 develop 브랜치에서 feature-* 브랜치를 분기합니다.&lt;/li&gt;
  &lt;li&gt;배포를 준비하기위해 develop 브랜치에서 release-* 브랜치를 분기합니다.&lt;/li&gt;
  &lt;li&gt;테스트를 진행하면서 발생하는 버그 수정은 release-* 브랜치에 직접 반영합니다.&lt;/li&gt;
  &lt;li&gt;테스트가 완료되면 release 브랜치를 main과 develop 브랜치에 병합합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 class=&quot;no-toc&quot;&gt;Github-Flow&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github flow&lt;/code&gt;는 git flow가 Github에서 사용하기에는 너무 복잡하여 나온 브랜치 전략입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-08.png&quot; alt=&quot;img08&quot; /&gt;&lt;/p&gt;

&lt;p&gt;hotfix 브랜치와 feature 브랜치를 따로 구분하지 않으며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pull Request&lt;/code&gt;를 사용하는 것을 권장합니다.&lt;/p&gt;

&lt;p&gt;브랜치는 항상 메인 브랜치를 통해 분기하며, 브랜치 이름과 커밋 메시지는 목적에 맞도록 명확하게 작성하는 것이 좋습니다. 또한 원격 브랜치로 수시로 push하고 자신이 하고 있는 작업을 다른사람이 확인할 수 있도록 합니다.&lt;/p&gt;

&lt;p&gt;피드백이나 도움요청, 또는 병합 준비가 되었을 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull request&lt;/code&gt;를 생성합니다.&lt;/p&gt;

&lt;p&gt;현재 우리팀에서는 이 전략을 통해 버전을 관리하고 있으며, 이슈를 기반으로 하여 브랜치를 생성합니다. 다음 글을 참고하세요.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/etc/github_issue&quot; target=&quot;_blank&quot;&gt;GitHub로 프로젝트 관리하기&lt;/a&gt;&lt;/p&gt;

&lt;h3 class=&quot;no-toc&quot;&gt;Gitlab-Flow&lt;/h3&gt;

&lt;p&gt;gitlab flow는 복잡하지 않고 효율성을 높이기 위해 생긴 브랜치 전략으로, master, feature, production 브랜치가 존재합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-09.png&quot; alt=&quot;img09&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기능 구현은 feature 브랜치를 통해서 이루어지며, master 브랜치는 production 브랜치로 병합됩니다. production 브랜치는 오직 배포만을 담당합니다.&lt;/p&gt;

&lt;p&gt;Gitlab을 사용해 본적이 없어서 자세한 내용은 생략하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;헤드head&quot;&gt;헤드(HEAD)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;헤드(HEAD)&lt;/code&gt;는 &lt;code class=&quot;language-plaintext bgcolor orange highlighter-rouge&quot; style=&quot;color: orangered&quot;&gt;현재 체크아웃된 브랜치의 커밋에 대한 참조 포인터&lt;/code&gt;입니다. 평소에는 브랜치를 통해 간접적으로 최신 커밋을 참조하고 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-12.png&quot; alt=&quot;img12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브랜치를 설명할때 체크아웃을 브랜치를 옮기는 작업이라고 했지만, 정확하게는 헤드의 참조를 변경하는 작업입니다. 위에 그림처럼 헤드가 브랜치를 통해 간접적으로 커밋을 참조하는 상태를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Attached HEAD State&lt;/code&gt;라고 하며, 직접적으로 커밋을 참조하는 상태를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Detached HEAD State&lt;/code&gt;라고 합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-13.png&quot; alt=&quot;img13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;체크아웃을 통해 헤드를 옮김으로써 이전 커밋 지점으로 되돌아가는 것이 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;원격-브랜치remote-branch&quot;&gt;원격 브랜치(Remote Branch)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;원격 브랜치(remote branch)&lt;/code&gt;는 원격 저장소의 브랜치를 트래킹(Tracking)하는 브랜치 입니다. 로컬에 존재하면서 원격 저장소와 통신하며 자동으로 업데이트 됩니다.&lt;/p&gt;

&lt;p&gt;원격 저장소를 clone하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;이라는 이름의 원격 브랜치가 생성되고, 로컬 브랜치를 원격 브랜치와 동기화시킵니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-14.png&quot; alt=&quot;img14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원격 브랜치와 로컬 브랜치는 독립적으로 존재하기 때문에 로컬 브랜치에서 커밋하더라도 원격 브랜치에 바로 반영되지는 않습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-15.png&quot; alt=&quot;img15&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;병합merge&quot;&gt;병합(merge)&lt;/h2&gt;

&lt;p&gt;병합은 브랜치로 분기되어 있는 커밋을 하나의 브랜치로 합치는 작업을 말합니다. 병합 방식에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fast-forward merge&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3-way merge&lt;/code&gt;로 나눌 수 있습니다.&lt;/p&gt;

&lt;h3 class=&quot;no-toc&quot;&gt;fast-forward merge&lt;/h3&gt;

&lt;p&gt;다음과 같이 브랜치가 분기점으로부터 변화가 없는 상태를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;빨리감기(fast-forward) 상태&lt;/code&gt;라고 합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-16.png&quot; alt=&quot;img16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 브랜치는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;issue1&lt;/code&gt; 브랜치가 분기한 이후로 변화가 없는 상태이며, 이 경우 merge를 하면 커밋 지점을 따로 만들지 않고 브랜치의 참조만 변경하게 됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-17.png&quot; alt=&quot;img17&quot; /&gt;&lt;/p&gt;

&lt;h3 class=&quot;no-toc&quot;&gt;non fast-forward merge&lt;/h3&gt;

&lt;p&gt;다음과 같이 빨리감기 상태가 아니라면 참조변수를 옮기는 것 만으로 병합을 할 수 없습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-18.png&quot; alt=&quot;img18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 경우 새로운 커밋을 만들어서 병합을 수행하게 됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-19.png&quot; alt=&quot;img19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이때 main 브랜치에서 수정한 파일을 issue1 브랜치에서도 수정했다면 병합충돌이 발생할 수 있습니다.
튜토리얼을 참고해주세요.&lt;/p&gt;

&lt;h2 id=&quot;패치fetch&quot;&gt;패치(fetch)&lt;/h2&gt;

&lt;p&gt;pull은 패치와 병합 2가지 작업으로 구성되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;패치(fetch)&lt;/code&gt;는 원격 브랜치만 원격 저장소와 동기화시키며, 병합은 위에서 설명한 것과 같이 로컬 저장소를 원격 저장소와 동기화 시킵니다.&lt;/p&gt;

&lt;p&gt;패치작업의 경우 바로 로컬 저장소에 변경 내용이 반영되지 않기 때문에 헤드만 이동하여 원격 저장소의 커밋을 확인할 수 있어서 병합충돌의 위험을 줄일 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/git/git-img-20.png&quot; alt=&quot;img23&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>huimang2</name>
        
        
      </author>

      

      
        <category term="github" />
      

      
        <summary type="html">Git와 Github 차이</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">GitHub로 프로젝트 관리하기</title>
      <link href="https://huimang2.github.io/etc/github_issue" rel="alternate" type="text/html" title="GitHub로 프로젝트 관리하기" />
      <published>2022-08-27T16:00:00+09:00</published>
      <updated>2022-08-27T16:00:00+09:00</updated>
      <id>https://huimang2.github.io/etc/github_issue</id>
      <content type="html" xml:base="https://huimang2.github.io/etc/github_issue">&lt;p&gt;팀 프로젝트를 진행함에 있어 일정관리가 필요한데 GitHub를 사용하여 일정관리를 해보도록 하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;프로젝트-만들기&quot;&gt;프로젝트 만들기&lt;/h1&gt;

&lt;p&gt;Github의 프로젝트 레포지토리에 접속하면 상단에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projects&lt;/code&gt; 탭이 있습니다. 클릭하세요.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img001.png&quot; alt=&quot;img001&quot; /&gt;&lt;/p&gt;

&lt;p&gt;얼마 전까지만 해도 beta 버전이었는데 clasic이 사라지고 beta가 정식 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projects&lt;/code&gt;가 되었습니다. 오른쪽 상단에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add project&lt;/code&gt;를 클릭하고, 아래쪽에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go to ... to create a new project&lt;/code&gt;를 클릭하세요.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img002.png&quot; alt=&quot;img002&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이어서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New project&lt;/code&gt;를 클릭합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img003.png&quot; alt=&quot;img003&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마음에 드는 템플릿을 선택하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt;를 누릅니다. 저는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Team Backlog&lt;/code&gt;를 선택했습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img004.png&quot; alt=&quot;img004&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 관리할 수 있는 보드가 생성되었습니다! 왼쪽 상단에 프로젝트 보드 이름을 변경해줍시다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img005.png&quot; alt=&quot;img005&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왼쪽에 자물쇠 표시는 Private 상태를 나타내는데 access 권한이 없는 유저의 접근을 막습니다. 확인하지는 않았지만 같은 프로젝트를 진행하는 팀원들은 프로젝트 보드가 표시될 것으로 예상합니다.&lt;/p&gt;

&lt;p&gt;나중에 설명할텐데 PR이나 이슈의 상태가 closed 라면 연관된 이슈를 자동으로 closed 상태로 바꾸기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Workflows&lt;/code&gt;를 설정해야합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img038.png&quot; alt=&quot;img038&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;item closed&lt;/code&gt;에서 Set를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Status: Done&lt;/code&gt;로 바꾸고 오른쪽 위에 Disabled를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enabled&lt;/code&gt;로 바꿔주세요.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img039.png&quot; alt=&quot;img039&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pull request merged도 동일하게 바꿔줍니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img040.png&quot; alt=&quot;img040&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item added to project&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New&lt;/code&gt;가 설정되어 있습니다. 스위치만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enabled&lt;/code&gt;로 바꿔주세요. 이 경우 이슈나 PR이 생성되면 자동으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New&lt;/code&gt; 상태가 됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img041.png&quot; alt=&quot;img041&quot; /&gt;&lt;/p&gt;

&lt;p&gt;나머지는 선택적으로 해주시면 됩니다.&lt;/p&gt;

&lt;p&gt;이제 다시 레포지토리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projects&lt;/code&gt; 탭으로 돌아와서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add project&lt;/code&gt;를 클릭하면 방금 생성한 프로젝트 백로그가 있습니다. 클릭해주세요.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img006.png&quot; alt=&quot;img006&quot; /&gt;&lt;/p&gt;

&lt;p&gt;빈곳 아무곳이나 클릭하면 다음과 같이 레포지토리에 프로젝트 백로그가 생성됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img007.png&quot; alt=&quot;img007&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;이슈issues-등록&quot;&gt;이슈(Issues) 등록&lt;/h1&gt;

&lt;p&gt;이제 프로젝트 보드에 이슈를 등록해보겠습니다.&lt;/p&gt;

&lt;p&gt;레포지토리에서 상단의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Issues&lt;/code&gt; 탭을 클릭합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img008.png&quot; alt=&quot;img008&quot; /&gt;&lt;/p&gt;

&lt;p&gt;상단 메뉴를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;라벨(Labels)&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;마일 스톤(Milestones)&lt;/code&gt;이 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img009.png&quot; alt=&quot;img009&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;라벨labels&quot;&gt;라벨(Labels)&lt;/h2&gt;

&lt;p&gt;라벨은 이슈의 유형을 지정해 줄 수 있습니다. 라벨을 클릭해서 확인하면 기본 라벨이 생성되어 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img010.png&quot; alt=&quot;img010&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit&lt;/code&gt;를 눌러 수정하거나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New label&lt;/code&gt;을 눌러 새로운 라벨을 생성할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;마일-스톤milestones&quot;&gt;마일 스톤(Milestones)&lt;/h2&gt;

&lt;p&gt;마일 스톤은 한국어로 이정표를 뜻합니다. 말 그대로 이정표를 두고 일정을 관리 할 수 있도록 합니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New milestone&lt;/code&gt;을 클릭하여 새로운 마일 스톤을 생성합시다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img011.png&quot; alt=&quot;img011&quot; /&gt;&lt;/p&gt;

&lt;p&gt;타이틀 및 일정 기한과 함께 짧은 설명을 적고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create milestone&lt;/code&gt;을 누르면 마일 스톤이 생성됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img012.png&quot; alt=&quot;img012&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이슈issues&quot;&gt;이슈(Issues)&lt;/h2&gt;

&lt;p&gt;이제 이슈를 등록해보겠습니다. 상단에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New issue&lt;/code&gt;를 클릭하세요.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img013.png&quot; alt=&quot;img013&quot; /&gt;&lt;/p&gt;

&lt;p&gt;제목과 이슈 내용을 적어주기만 하면 이슈가 등록됩니다. 마크다운 문법을 통해 작성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;중요한 부분은 오른쪽 영역입니다. 이슈를 통해 팀원들에게 작업을 할당하는 것이 가능합니다. 우선 Assignees를 클릭하면 레포지토리에 접근 권한이 있는 팀원들의 목록이 뜹니다. 작업 할당을 원하는 팀원을 선택합니다. 여러 인원을 선택할 수도 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img014.png&quot; alt=&quot;img014&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 아래쪽에는 위에서 생성한 라벨과 프로젝트 백로그, 마일스톤을 설정해 줄 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img015.png&quot; alt=&quot;img015&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Submit new issue&lt;/code&gt;를 클릭면 이슈가 등록됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img016.png&quot; alt=&quot;img016&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img017.png&quot; alt=&quot;img017&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 다시 프로젝트 백로그로 이동해보세요.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img018.png&quot; alt=&quot;img018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Workflows를 설정하기 전에 등록해서 이슈가 No Status에 있습니다. 해당 이슈를 마우스로 드래그하여 상태를 설정해줄 수 있습니다. 저는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;In progress&lt;/code&gt; 상태로 끌어넣었습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img019.png&quot; alt=&quot;img019&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 이슈를 클릭하면 우선순위나 개발 사이즈도 설정해 줄 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img020.png&quot; alt=&quot;img020&quot; /&gt;&lt;/p&gt;

&lt;p&gt;동일하게 팀원들에 대한 이슈도 작성여 작업을 할당해 주면 프로젝트 백로그를 통해 진행 과정을 한눈에 확인할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img021.png&quot; alt=&quot;img021&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;이슈-기반-브랜치-만들기&quot;&gt;이슈 기반 브랜치 만들기&lt;/h1&gt;

&lt;p&gt;이렇게 생성된 이슈를 기반으로 하여 브랜치를 만들어 에디터를 통해 작업을 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;인텔리제이에서-브랜치-만들기&quot;&gt;인텔리제이에서 브랜치 만들기&lt;/h2&gt;

&lt;p&gt;인텔리 제이에서는 브랜치를 만들기 전에 Task와 GitHub를 연결해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + Alt + S&lt;/code&gt;를 눌러 설정창을 열고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;도구 &amp;gt; 작업 &amp;gt; 서버&lt;/code&gt;로 이동합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img022.png&quot; alt=&quot;img022&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;를 눌러 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github&lt;/code&gt;를 선택하고 &lt;code class=&quot;language-plaintext bgcolor orange highlighter-rouge&quot; style=&quot;color: orangered&quot;&gt;레포지토리 소유자&lt;/code&gt;와 &lt;code class=&quot;language-plaintext bgcolor orange highlighter-rouge&quot; style=&quot;color: orangered&quot;&gt;레포지토리 이름&lt;/code&gt;을 입력 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API 토큰 생성&lt;/code&gt;을 눌러주세요. 아래쪽에 나에게 할당되지 않은 이슈 포함 체크를 해제하면 본인에게 할당된 이슈만 확인가능합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img023.png&quot; alt=&quot;img023&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인하고 인증을 받으면 토큰이 자동으로 입력됩니다. 확인을 누르고 에디터 오른쪽 상단에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;디폴트 작업 &amp;gt; 작업열기&lt;/code&gt;을 클릭하세요.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img024.png&quot; alt=&quot;img024&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 이슈 목록을 확인할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img025.png&quot; alt=&quot;img025&quot; /&gt;&lt;/p&gt;

&lt;p&gt;할당받은 이슈를 더블클릭하여 작업을 생성해주세요. 이때 브랜치를 생성할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img026.png&quot; alt=&quot;img026&quot; /&gt;&lt;/p&gt;

&lt;p&gt;확인을 누르면 브랜치가 생성되어 변경되고 task 상태가 변화된 것을 확인할 수 있습니다. 즉, 이슈를 기반으로 하여 task와 브랜치가 같이 만들어졌습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img027.png&quot; alt=&quot;img027&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img028.png&quot; alt=&quot;img028&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 코드 개발을 열심히 하고 브랜치와 수정 내역을 확인 후 commit / push를 합니다.&lt;/p&gt;

&lt;p&gt;인텔리제이의 경우 왼쪽 가장자리에 커밋 탭이 있으며, 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt + 0&lt;/code&gt;을 눌러도 됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img029.png&quot; alt=&quot;img029&quot; /&gt;&lt;/p&gt;

&lt;p&gt;확인 후 메시지를 작성하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;커밋&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;커밋 및 푸시&lt;/code&gt;를 누르세요.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img030.png&quot; alt=&quot;img030&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 왼쪽 가장자리의 풀 리퀘스트 아이콘 탭을 클릭하고 상단의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;를 눌러 풀 리퀘스트를 보냅니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img031.png&quot; alt=&quot;img031&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PR 제목과 내용을 입력 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;풀 리퀘스트 생성&lt;/code&gt;을 클릭하여 PR을 보냅시다. 이때 검토자, 담당자 및 라벨을 설정할 수 있습니다.&lt;/p&gt;

&lt;p&gt;중요한 부분은 내용에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close #[이슈번호]&lt;/code&gt;를 적어주면 Merge가 되었을 때 참조된 이슈가 closed 상태가 된다는 것입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img032.png&quot; alt=&quot;img032&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub 레포지토리에 들어가서 확인해보면 PR이 잘 작성되어 있습니다. 이슈와 마찬가지로 프로젝트의 우선순위와 크기, 마일스톤 등을 지정해 줄 수 있습니다. 차이점은 검토자를 설정할 수 있다는 것입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img033.png&quot; alt=&quot;img033&quot; /&gt;&lt;/p&gt;

&lt;p&gt;확인만 하고 에디터에서 Merge를 해보겠습니다. 제가 담당자 이므로 PR은 저한테 날아올 것입니다. 왼쪽 가장자리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;풀 리퀘스트&lt;/code&gt; 탭을 누르고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state:open&lt;/code&gt; 을 검색하면 PR이 온 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img034.png&quot; alt=&quot;img034&quot; /&gt;&lt;/p&gt;

&lt;p&gt;더블클릭하면 내용을 확인할 수 있으며, Merge가 가능합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img035.png&quot; alt=&quot;img035&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Merge 후 이슈를 확인하면 위에서 언급한 대로 closed 상태가 된 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img042.png&quot; alt=&quot;img042&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 브랜치를 삭제하고 task를 default 상태로 되돌립니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img036.png&quot; alt=&quot;img036&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img037.png&quot; alt=&quot;img037&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vs-code에서-브랜치-만들기&quot;&gt;VS Code에서 브랜치 만들기&lt;/h2&gt;

&lt;p&gt;VS code도 인텔리제이와 비슷합니다. 이슈를 생성하고, VS code에 다음 Extension을 설치하세요.&lt;br /&gt;
:&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github&quot; target=&quot;_blank&quot;&gt;GitHub Pull Requests and Issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;설치를 하면 왼쪽 가장자리에 github 아이콘이 생깁니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img043.png&quot; alt=&quot;img043&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클릭후 하단에 ISSUES 영역에서 refresh 버튼을 누르면 이슈가 나타납니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img044.png&quot; alt=&quot;img044&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마우스를 hover하면 오른쪽에 화살표가 뜹니다. 화살표를 클릭하면 이슈를 기반으로 하여 브랜치가 생성됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img045.png&quot; alt=&quot;img045&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img046.png&quot; alt=&quot;img046&quot; /&gt;&lt;/p&gt;

&lt;p&gt;코드를 개발하고 커밋 / 푸시를 합니다. 센스있게도 메시지가 자동으로 작성되어 있으며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#[이슈 번호]&lt;/code&gt;를 붙여 연관된 이슈를 참조하고 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img047.png&quot; alt=&quot;img047&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기트허브 아이콘을 클릭하여 상단에 풀리퀘스트 생성 버튼을 누르면 왼쪽 아이콘바에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github Pull Request&lt;/code&gt; 아이콘이 뜹니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img048.png&quot; alt=&quot;img048&quot; /&gt;&lt;/p&gt;

&lt;p&gt;커밋과 마찬가지로 PR도 DESCRIPTION에 연관된 이슈를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixes&lt;/code&gt;로 선언하여 참조하도록 자동으로 작성되어 있습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Close&lt;/code&gt; 말고도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; 같은 선언자도 Merge가 되면 참조된 이슈를 함께 닫는 듯 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt;를 눌러 PR을 보내고 기트허브 아이콘을 누르면 PR이 Open 상태가 된 것을 확인할 수 있습니다. 해당 PR을 확인하면 github에 가지 않아도 에디터 내에서 라벨이라던지 검토자 라던지 설정이 가능합니다. Merge도 가능합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img049.png&quot; alt=&quot;img049&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Merge를 누르고 Create Merge Commit를 누르면 Merge가 됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img050.png&quot; alt=&quot;img050&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img051.png&quot; alt=&quot;img051&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delete branch...&lt;/code&gt;를 눌러 브랜치를 바로 삭제할 수 있으며, 왼쪽 하단에 ISSUE를 refresh하면 이슈가 닫힌 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/github/img052.png&quot; alt=&quot;img052&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>huimang2</name>
        
        
      </author>

      

      
        <category term="github" />
      

      
        <summary type="html">팀 프로젝트를 진행함에 있어 일정관리가 필요한데 GitHub를 사용하여 일정관리를 해보도록 하겠습니다.</summary>
      

      
      
    </entry>
  
</feed>
